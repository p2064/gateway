// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: changer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChangerService_ChangeEvent_FullMethodName = "/proto.ChangerService/ChangeEvent"
)

// ChangerServiceClient is the client API for ChangerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChangerServiceClient interface {
	ChangeEvent(ctx context.Context, in *ChangeEventRequest, opts ...grpc.CallOption) (*ChangeEventResponse, error)
}

type changerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChangerServiceClient(cc grpc.ClientConnInterface) ChangerServiceClient {
	return &changerServiceClient{cc}
}

func (c *changerServiceClient) ChangeEvent(ctx context.Context, in *ChangeEventRequest, opts ...grpc.CallOption) (*ChangeEventResponse, error) {
	out := new(ChangeEventResponse)
	err := c.cc.Invoke(ctx, ChangerService_ChangeEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChangerServiceServer is the server API for ChangerService service.
// All implementations should embed UnimplementedChangerServiceServer
// for forward compatibility
type ChangerServiceServer interface {
	ChangeEvent(context.Context, *ChangeEventRequest) (*ChangeEventResponse, error)
}

// UnimplementedChangerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChangerServiceServer struct {
}

func (UnimplementedChangerServiceServer) ChangeEvent(context.Context, *ChangeEventRequest) (*ChangeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEvent not implemented")
}

// UnsafeChangerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChangerServiceServer will
// result in compilation errors.
type UnsafeChangerServiceServer interface {
	mustEmbedUnimplementedChangerServiceServer()
}

func RegisterChangerServiceServer(s grpc.ServiceRegistrar, srv ChangerServiceServer) {
	s.RegisterService(&ChangerService_ServiceDesc, srv)
}

func _ChangerService_ChangeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangerServiceServer).ChangeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangerService_ChangeEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangerServiceServer).ChangeEvent(ctx, req.(*ChangeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChangerService_ServiceDesc is the grpc.ServiceDesc for ChangerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChangerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChangerService",
	HandlerType: (*ChangerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeEvent",
			Handler:    _ChangerService_ChangeEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "changer.proto",
}
